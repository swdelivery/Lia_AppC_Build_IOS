diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+TakePhoto.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+TakePhoto.kt
index 88c085f..2b7205e 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+TakePhoto.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+TakePhoto.kt
@@ -7,6 +7,7 @@ import android.graphics.BitmapFactory
 import android.graphics.ImageFormat
 import android.graphics.Matrix
 import android.hardware.camera2.*
+import androidx.exifinterface.media.ExifInterface
 import android.util.Log
 import com.facebook.react.bridge.Arguments
 import com.facebook.react.bridge.ReadableMap
@@ -71,7 +72,33 @@ private fun writePhotoToFile(photo: CameraSession.CapturedPhoto, file: File) {
     val imageBytes = ByteArray(byteBuffer.remaining()).apply { byteBuffer.get(this) }
     val bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)
     val matrix = Matrix()
-    matrix.preScale(-1f, 1f)
+    // Fix rotation of the mirrored image
+    val exif = ExifInterface(imageBytes.inputStream())
+    val orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED)
+
+    when (orientation) {
+      ExifInterface.ORIENTATION_ROTATE_180 -> {
+        matrix.setRotate(180f)
+        matrix.postScale(-1f, 1f)
+      }
+      ExifInterface.ORIENTATION_FLIP_VERTICAL -> {
+        matrix.setRotate(180f)
+      }
+      ExifInterface.ORIENTATION_TRANSPOSE -> {
+        matrix.setRotate(90f)
+      }
+      ExifInterface.ORIENTATION_ROTATE_90 -> {
+        matrix.setRotate(90f)
+        matrix.postScale(-1f, 1f)
+      }
+      ExifInterface.ORIENTATION_TRANSVERSE -> {
+        matrix.setRotate(-90f)
+      }
+      ExifInterface.ORIENTATION_ROTATE_270 -> {
+        matrix.setRotate(-90f)
+        matrix.postScale(-1f, 1f)
+      }
+    }
     val processedBitmap =
       Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, false)
     FileOutputStream(file).use { stream ->
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/PreviewView.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/PreviewView.kt
index cfda57a..bac806c 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/PreviewView.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/PreviewView.kt
@@ -48,6 +48,8 @@ class PreviewView(context: Context, callback: SurfaceHolder.Callback) : SurfaceV
     val contentAspectRatio = contentSize.width.toDouble() / contentSize.height
     val containerAspectRatio = containerSize.width.toDouble() / containerSize.height
 
+    Log.d(TAG, "coverSize :: $contentSize ($contentAspectRatio), ${containerSize.width}x${containerSize.height} ($containerAspectRatio)")
+
     val widthOverHeight = when (resizeMode) {
       ResizeMode.COVER -> contentAspectRatio > containerAspectRatio
       ResizeMode.CONTAIN -> contentAspectRatio < containerAspectRatio
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/extensions/CameraCharacteristics+getPreviewSize.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/extensions/CameraCharacteristics+getPreviewSize.kt
index e758c45..74a6452 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/extensions/CameraCharacteristics+getPreviewSize.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/extensions/CameraCharacteristics+getPreviewSize.kt
@@ -5,6 +5,23 @@ import android.hardware.camera2.CameraCharacteristics
 import android.util.Size
 import android.view.SurfaceHolder
 
+fun calculateNewSize(maxSize: Size, originalSize: Size): Size {
+  val maxRatio = maxSize.width.toDouble() / maxSize.height
+  val originalRatio = originalSize.width.toDouble() / originalSize.height
+
+  return if (originalRatio > maxRatio) {
+    // Scale by width to fit the maximum width
+    val scaledWidth = maxSize.width
+    val scaledHeight = (maxSize.width / originalRatio).toInt()
+    Size(scaledWidth, scaledHeight)
+  } else {
+    // Scale by height to fit the maximum height
+    val scaledWidth = (maxSize.height * originalRatio).toInt()
+    val scaledHeight = maxSize.height
+    Size(scaledWidth, scaledHeight)
+  }
+}
+
 fun getMaximumPreviewSize(): Size {
   // See https://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap
   // According to the Android Developer documentation, PREVIEW streams can have a resolution
@@ -16,7 +33,7 @@ fun getMaximumPreviewSize(): Size {
   )
   val isHighResScreen = displaySize.bigger >= display1080p.bigger || displaySize.smaller >= display1080p.smaller
 
-  return if (isHighResScreen) display1080p else displaySize
+  return if (isHighResScreen) calculateNewSize(display1080p, displaySize) else displaySize
 }
 
 fun CameraCharacteristics.getPreviewTargetSize(targetSize: Size?): Size {
